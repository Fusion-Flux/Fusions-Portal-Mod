plugins {
	id("org.quiltmc.loom") version "1.1.+"
	id("org.ajoberstar.grgit") version "4.1.0"
	id("checkstyle")
}

java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

base.archivesName.set(project["archives_base_name"] as String)
project.version = "${project["mod_version"]}-rev.${grgit.head().abbreviatedId}"
project.group = project["maven_group"]

def minecraftVersion = project["minecraft_version"]

repositories {
	maven {
		url = "https://maven.shedaniel.me/"
	}

	maven {
		url = "https://www.cursemaven.com"
	}

	maven {
		url = "https://maven.terraformersmc.com/releases"
	}

	maven {
		url = "https://hephaestus.dev/release"
	}

	maven {
		url = "https://api.modrinth.com/maven"
	}

	maven {
		url = "https://maven.tterrag.com/"
	}

	maven {
		url = "https://mvn.devos.one/snapshots/"
	}

	maven {
		name = "Ladysnake Mods"
		url = uri("https://maven.ladysnake.org/releases")
	}

	maven {
		url = uri("https://maven.jamieswhiteshirt.com/libs-release")
		content {
			includeGroup("com.jamieswhiteshirt")
		}
	}

	maven {
		name = "AlexIIL"
		url = uri("https://maven.alexiil.uk/")
	}

	maven {
		name = "Gegy"
		url = uri("https://maven.gegy.dev")
	}

	maven {
		name = "ParchmentMC"
		url = uri("https://maven.parchmentmc.org")
	}

	maven {
		url = "https://jitpack.io/"
	}

}

dependencies {
	minecraft("com.mojang:minecraft:$minecraftVersion")

	mappings(loom.layered {
		mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${mappings_version}:intermediary-v2")
		parchment("org.parchmentmc.data:parchment-${project["parchment_version"]}@zip")
		officialMojangMappings()
	})

	modImplementation("org.quiltmc:quilt-loader:${project["loader_version"]}")
	modImplementation("org.quiltmc.quilted-fabric-api:quilted-fabric-api:${project["quilted_version"]}-$minecraftVersion")

	modImplementation("com.terraformersmc:modmenu:${project["mod_menu_version"]}") {
		exclude(group: "net.fabricmc.fabric-api")
		exclude(group: "net.fabricmc")
	}

	include(modApi("io.github.tropheusj.stonecutter_recipe_tags:fabric:5.2.0+1.19.4.fabric") {
		transitive = false
	})

	include(modImplementation("maven.modrinth:gravity-api:${project["gravity_api_version"]}") {
		transitive = false
	})

	include(modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:5.2.1") {
		exclude(group: "net.fabricmc.fabric-api")
		exclude(group: "net.fabricmc")
	})
	include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:5.2.1")

	include(modImplementation("com.github.LlamaLad7.MixinExtras:mixinextras-fabric:0.2.0-beta.8"))
	annotationProcessor("com.github.LlamaLad7.MixinExtras:mixinextras-fabric:0.2.0-beta.8")

	include(modImplementation("maven.modrinth:midnightlib:1.4.1-quilt"))

//	modCompileOnly("com.simibubi.create:create-fabric-1.19.2:0.5.0.i-930+1.19.2")

	modCompileOnly("maven.modrinth:visiblebarriers:2.0.4")

	include(implementation("net.objecthunter:exp4j:0.4.8"))

//	modCompileOnly("alexiil.mc.lib:libmultipart-all:0.8.0")

	modCompileOnly("dev.lambdaurora:lambdynamiclights:2.3.1+1.20.1")

	modCompileOnly("com.github.Virtuoel:Pehkui:3.6.3") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modCompileOnly("maven.modrinth:rayon:1.7.2+1.20.1-fabric")

	include(modImplementation("maven.modrinth:json-entity-animation:0.2.1+1.19.4"))

	include(modImplementation("maven.modrinth:no-indium:1.1.0+1.20"))

	file("runtime-mods").list { _, name -> name.endsWith(".jar") }.each {
		modLocalRuntime(files("runtime-mods/$it"))
	}

	modCompileOnly("maven.modrinth:sodium:mc1.20.1-0.5.2")
}

loom {
	accessWidenerPath.set(file("src/main/resources/portalcubed.accesswidener"))
	runs {
		create("datagen") {
			client()
			name("Data Generation")
			vmArg("-Dfabric-api.datagen")
			vmArg("-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}")
			vmArg("-Dfabric-api.datagen.modid=portalcubed")
		}
	}
}

sourceSets {
	main {
		resources {
			srcDir("src/generated/resources")
			exclude("src/generated/resources/.cache")
		}
	}
}

checkstyle {
	toolVersion = "10.7.0"
	ignoreFailures = false
	maxWarnings = project["checkstyle_max_warns"] as int
}

tasks.processResources {
	inputs.property("version", project.version)

	filesMatching("quilt.mod.json") {
		expand("version": project.version)
	}
}

tasks.compileJava {
	options.encoding = "UTF-8"
	options.release.set(17)
}

java {
	withSourcesJar()
}

tasks.jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}" }
	}
}
